[
    {
        "input": "The bald eagle likes the rabbit. The bald eagle visits the rabbit. The bear does not chase the rabbit. The bear likes the rabbit. The bear visits the bald eagle. The bear visits the cat. The bear visits the rabbit. The cat chases the bald eagle. The cat likes the bald eagle. The rabbit chases the bald eagle. The rabbit is blue. The rabbit likes the bald eagle. If someone is round then they like the bear. If someone is big and blue then they like the rabbit. If someone is round and they chase the bear then they do not like the cat. If someone likes the bald eagle and the bald eagle does not visit the cat then they like the cat. If someone chases the bald eagle and the bald eagle visits the rabbit then the rabbit chases the cat. If someone likes the bear then they chase the bear. If someone visits the bald eagle and they visit the cat then the bald eagle is round. If someone chases the bear then the bear is round. If someone likes the cat and they chase the cat then they visit the bald eagle. Question: The bear does not like the bear.?",
        "input_tokens": 2374,
        "output": "universe u\n\nconstant obj : Type u\n\nconstant BaldEagle : obj\nconstant Bear : obj\nconstant Cat : obj\nconstant Rabbit : obj\n\nconstant Likes : obj → obj → Prop\nconstant Visits : obj → obj → Prop\nconstant Chases : obj → obj → Prop\nconstant Round : obj → Prop\nconstant Big : obj → Prop\nconstant Blue : obj → Prop\n\naxiom T1 : Likes BaldEagle Rabbit\naxiom T2 : Visits BaldEagle Rabbit\naxiom T3 : ¬ Chases Bear Rabbit\naxiom T4 : Likes Bear Rabbit\naxiom T5 : Visits Bear BaldEagle\naxiom T6 : Visits Bear Cat\naxiom T7 : Visits Bear Rabbit\naxiom T8 : Chases Cat BaldEagle\naxiom T9 : Likes Cat BaldEagle\naxiom T10 : Chases Rabbit BaldEagle\naxiom T11 : Blue Rabbit\naxiom T12 : Likes Rabbit BaldEagle\n\naxiom R1 : ∀ x : obj, Round x → Likes x Bear\naxiom R2 : ∀ x : obj, Big x ∧ Blue x → Likes x Rabbit\naxiom R3 : ∀ x : obj, Round x ∧ Chases x Bear → ¬ Likes x Cat\naxiom R4 : ∀ x : obj, Likes x BaldEagle ∧ ¬ Visits BaldEagle Cat → Likes x Cat\naxiom R5 : ∀ x : obj, Chases x BaldEagle ∧ Visits BaldEagle Rabbit → Chases x Cat\naxiom R6 : ∀ x : obj, Likes x Bear → Chases x Bear\naxiom R7 : ∀ x : obj, Visits x BaldEagle ∧ Visits x Cat → Round BaldEagle\naxiom R8 : ∀ x : obj, Chases x Bear → Round Bear\naxiom R9 : ∀ x : obj, Likes x Cat ∧ Chases x Cat → Visits x BaldEagle\n\ntheorem bear_does_not_like_bear : ¬ Likes Bear Bear :=\nbegin\n  sorry\nend\n\ntheorem bear_likes_bear : Likes Bear Bear :=\nbegin\n  apply R4,\n  split,\n  apply R9,\n  split,\n  exact T6,\n  apply R8,\n  apply R1,\n  exact T5,\nend\n\n-- It cannot be proven in Lean. So\n-- The answer is False",
        "output_tokens": 503
    },
    {
        "input": "Anne is quiet. Erin is green. Erin is kind. Erin is quiet. Erin is rough. Fiona is kind. Fiona is nice. Fiona is quiet. Fiona is red. Harry is nice. If someone is rough then they are green. If someone is nice then they are green. If someone is quiet and not nice then they are cold. All quiet people are rough. Kind people are quiet. If someone is green then they are kind. If someone is rough then they are red. Question: Harry is red.?",
        "input_tokens": 2247,
        "output": "universe u\n\nconstant obj : Type u\n\nconstant Anne : obj\nconstant Erin : obj\nconstant Fiona : obj\nconstant Harry : obj\n\nconstant Quiet : obj → Prop\nconstant Green : obj → Prop\nconstant Kind : obj → Prop\nconstant Rough : obj → Prop\nconstant Nice : obj → Prop\nconstant Red : obj → Prop\nconstant Cold : obj → Prop\n\naxiom T1 : Quiet Anne\naxiom T2 : Green Erin\naxiom T3 : Kind Erin\naxiom T4 : Quiet Erin\naxiom T5 : Rough Erin\naxiom T6 : Kind Fiona\naxiom T7 : Nice Fiona\naxiom T8 : Quiet Fiona\naxiom T9 : Red Fiona\naxiom T10 : Nice Harry\n\naxiom R1 : ∀ x : obj, Rough x → Green x\naxiom R2 : ∀ x : obj, Nice x → Green x\naxiom R3 : ∀ x : obj, Quiet x ∧ ¬ Nice x → Cold x\naxiom R4 : ∀ x : obj, Quiet x → Rough x\naxiom R5 : ∀ x : obj, Kind x → Quiet x\naxiom R6 : ∀ x : obj, Green x → Kind x\naxiom R7 : ∀ x : obj, Rough x → Red x\n\ntheorem harry_is_red : Red Harry :=\nbegin\n  apply R7,\n  apply R1,\n  apply R2,\n  exact T10,\nend\n\n-- The answer is True",
        "output_tokens": 313
    },
    {
        "input": "The cat chases the lion. The cat is round. The cat is young. The dog eats the squirrel. The lion chases the dog. The squirrel sees the dog. The squirrel sees the lion. If someone is young then they chase the dog. If someone sees the cat then the cat sees the lion. If someone is rough then they eat the squirrel. If someone is big and round then they eat the cat. If someone is rough then they see the cat. If someone sees the lion then they are rough. If the lion sees the cat and the cat chases the dog then the lion eats the dog. If someone is rough then they chase the squirrel. If someone is rough then they chase the cat. Question: The cat eats the squirrel.?",
        "input_tokens": 2296,
        "output": "universe u\n\nconstant obj : Type u\n\nconstant Cat : obj\nconstant Lion : obj\nconstant Dog : obj\nconstant Squirrel : obj\n\nconstant Round : obj → Prop\nconstant Young : obj → Prop\nconstant Eats : obj → obj → Prop\nconstant Chases : obj → obj → Prop\nconstant Sees : obj → obj → Prop\nconstant Rough : obj → Prop\nconstant Big : obj → Prop\n\naxiom T1 : Chases Lion Dog\naxiom T2 : Sees Squirrel Dog\naxiom T3 : Sees Squirrel Lion\naxiom T4 : Round Cat\naxiom T5 : Young Cat\naxiom T6 : Eats Dog Squirrel\naxiom T7 : Chases Squirrel Cat\naxiom T8 : Sees Cat Lion\naxiom T9 : Rough Lion\naxiom T10 : Rough Dog\naxiom T11 : Rough Squirrel\naxiom T12 : Sees Lion Cat\naxiom T13 : Chases Cat Dog\naxiom T14 : Eats Lion Dog\naxiom T15 : Chases Squirrel Cat\n\naxiom R1 : ∀ x : obj, Young x → Chases x Dog\naxiom R2 : ∀ x : obj, Sees x Cat → Sees Cat Lion\naxiom R3 : ∀ x : obj, Rough x → Eats x Squirrel\naxiom R4 : ∀ x : obj, Big x ∧ Round x → Eats x Cat\naxiom R5 : ∀ x : obj, Rough x → Sees x Cat\naxiom R6 : ∀ x : obj, Sees x Lion → Rough x\naxiom R7 : ∀ x : obj, Sees Lion Cat ∧ Chases Cat Dog → Eats Lion Dog\naxiom R8 : ∀ x : obj, Rough x → Chases x Squirrel\naxiom R9 : ∀ x : obj, Rough x → Chases x Cat\n\ntheorem cat_eats_squirrel : Eats Cat Squirrel :=\nbegin\n  sorry\nend\n\ntheorem cat_does_not_eat_squirrel : ¬ Eats Cat Squirrel :=\nbegin\n  apply R4 Cat,\n  split,\n  exact T4,\n  exact T1,\nend\n\n-- It can be proven in Lean. So\n-- The answer is False",
        "output_tokens": 485
    },
    {
        "input": "The bald eagle is kind. The bald eagle is red. The bear eats the tiger. The bear is round. The bear likes the bald eagle. The bear sees the lion. The lion eats the tiger. The lion is cold. The lion sees the tiger. The tiger is not nice. The tiger likes the bald eagle. The tiger sees the bald eagle. If something is kind then it likes the bear. If something is nice then it likes the tiger. If something eats the lion then it does not like the tiger. If the bald eagle likes the lion and the bald eagle sees the tiger then the lion is red. If something eats the bald eagle then the bald eagle does not see the bear. If something sees the tiger then the tiger likes the lion. If something eats the bear and it is round then it is nice. If something eats the tiger and it likes the bear then the bear is kind. If something likes the lion then the lion is kind. Question: The bear likes the bear.?",
        "input_tokens": 2345,
        "output": "universe u\n\nconstant obj : Type u\n\nconstant BaldEagle : obj\nconstant Bear : obj\nconstant Tiger : obj\nconstant Lion : obj\n\nconstant Kind : obj → Prop\nconstant Red : obj → Prop\nconstant Eats : obj → obj → Prop\nconstant Round : obj → Prop\nconstant Likes : obj → obj → Prop\nconstant Sees : obj → obj → Prop\nconstant Cold : obj → Prop\nconstant Nice : obj → Prop\n\naxiom T1 : Kind BaldEagle\naxiom T2 : Red BaldEagle\naxiom T3 : Eats Bear Tiger\naxiom T4 : Round Bear\naxiom T5 : Likes Bear BaldEagle\naxiom T6 : Sees Bear Lion\naxiom T7 : Eats Lion Tiger\naxiom T8 : Cold Lion\naxiom T9 : Sees Lion Tiger\naxiom T10 : ¬ Nice Tiger\naxiom T11 : Likes Tiger BaldEagle\naxiom T12 : Sees Tiger BaldEagle\n\naxiom R1 : ∀ x : obj, Kind x → Likes x Bear\naxiom R2 : ∀ x : obj, Nice x → Likes x Tiger\naxiom R3 : ∀ x : obj, Eats x Lion → ¬ Likes x Tiger\naxiom R4 : Likes BaldEagle Lion ∧ Sees BaldEagle Tiger → Red Lion\naxiom R5 : ∀ x : obj, Eats x BaldEagle → ¬ Sees x Bear\naxiom R6 : ∀ x : obj, Sees x Tiger → Likes x Lion\naxiom R7 : ∀ x : obj, Eats x Bear ∧ Round x → Nice x\naxiom R8 : ∀ x : obj, Eats x Tiger ∧ Likes x Bear → Kind Bear\naxiom R9 : ∀ x : obj, Likes x Lion → Kind Lion\n\ntheorem bear_likes_bear : Likes Bear Bear :=\nbegin\n  sorry\nend\n\ntheorem not_bear_likes_bear : ¬ Likes Bear Bear :=\nbegin\n  apply R8 Bear,\n  split,\n  exact T3,\n  apply R7 Bear,\n  split,\n  exact T4,\n  exact T5,\nend\n\n-- It cannot be proven in Lean. So\n-- The answer is False",
        "output_tokens": 474
    },
    {
        "input": "Anne is blue. Anne is red. Anne is smart. Dave is big. Dave is cold. Dave is nice. Fiona is smart. Harry is blue. Harry is cold. Harry is nice. Harry is red. Harry is smart. Kind things are nice. All cold, nice things are blue. Cold things are kind. Smart things are cold. All blue, smart things are red. Question: Fiona is not red.?",
        "input_tokens": 2228,
        "output": "universe u\n\nconstant obj : Type u\n\nconstant Anne : obj\nconstant Dave : obj\nconstant Fiona : obj\nconstant Harry : obj\n\nconstant Blue : obj → Prop\nconstant Red : obj → Prop\nconstant Smart : obj → Prop\nconstant Big : obj → Prop\nconstant Cold : obj → Prop\nconstant Nice : obj → Prop\nconstant Kind : obj → Prop\n\naxiom T1 : Blue Anne\naxiom T2 : Red Anne\naxiom T3 : Smart Anne\naxiom T4 : Big Dave\naxiom T5 : Cold Dave\naxiom T6 : Nice Dave\naxiom T7 : Smart Fiona\naxiom T8 : Blue Harry\naxiom T9 : Cold Harry\naxiom T10 : Nice Harry\naxiom T11 : Red Harry\naxiom T12 : Smart Harry\n\naxiom R1 : ∀ x : obj, Kind x → Nice x\naxiom R2 : ∀ x : obj, Cold x ∧ Nice x → Blue x\naxiom R3 : ∀ x : obj, Cold x → Kind x\naxiom R4 : ∀ x : obj, Smart x → Cold x\naxiom R5 : ∀ x : obj, Blue x ∧ Smart x → Red x\n\ntheorem fiona_is_not_red : ¬ Red Fiona :=\nbegin\n  sorry\nend\n\ntheorem fiona_is_red : Red Fiona :=\nbegin\n  apply R5,\n  split,\n  exact T7,\n  exact T1,\nend\n\n-- It cannot be proven in Lean. So\n-- The answer is False",
        "output_tokens": 325
    }
]